package com.springboot.productservice;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.springboot.productentity.ProductEntity;
import com.springboot.productmodel.ProductModel;
import com.springboot.repository.ProductRepository;

@Service
public class ProductService {
    @Autowired
    ProductRepository productRepository;
    
     public List<ProductEntity> getAllProducts() {

    	 List<ProductEntity> products=productRepository.findAll();
    	 return products;
    	 
    	 
	}

    public void saveProductDetails(ProductModel productModel) {

        double stockValue = productModel.getPrice() * productModel.getQuantity();
        double discountPrice = productModel.getPrice() * productModel.getDiscountRate() / 100;
        double taxPrice = productModel.getPrice() * 0.18;
        double offerPrice = productModel.getPrice() - discountPrice;
        double finalPrice = offerPrice + taxPrice;

        ProductEntity productEntity = new ProductEntity();

        productEntity.setName(productModel.getName());
        productEntity.setBrand(productModel.getBrand());
        productEntity.setMadeIn(productModel.getMadeIn());
        productEntity.setPrice(productModel.getPrice());
        productEntity.setQuantity(productModel.getQuantity());
        productEntity.setDiscountRate(productModel.getDiscountRate());
        productEntity.setDiscountPrice(discountPrice);
        productEntity.setOfferPrice(offerPrice);
        productEntity.setFinalPrice(finalPrice);
        productEntity.setStockValue(stockValue);
        productEntity.setTaxPrice(taxPrice);

        productRepository.save(productEntity);
        
        
        
    }

	public void deleteProductById(long id) {
		 productRepository.deleteById(id);
		
	}

	public ProductEntity searchById(Long id) {
	    Optional<ProductEntity> optionalData = productRepository.findById(id);
	    if (optionalData.isPresent()) {
	        ProductEntity product = optionalData.get();
	        return product;
	    } else {
	        return null;
	    }
	}

	public ProductEntity editProductDetails(Long id, ProductModel updatedProductModel) {
	    // Find the product by ID, if not found, throw an exception
	    Optional<ProductEntity> prev = productRepository.findById(id);

	    if(prev.isPresent()) {
	    	return prev.get();
	    }
	    else {
	    	return null;
	    }
	}

	public void saveUpdatedProduct(ProductEntity updatedProduct) {
		
		Optional<ProductEntity> optionalData = productRepository.findById(updatedProduct.getId());
	    if (optionalData.isPresent()) {
	        ProductEntity existintProduct = optionalData.get();
	    

		  double stockValue = updatedProduct.getPrice() * updatedProduct.getQuantity();
	        double discountPrice = updatedProduct.getPrice() * updatedProduct.getDiscountRate() / 100;
	        double taxPrice = updatedProduct.getPrice() * 0.18;
	        double offerPrice = updatedProduct.getPrice() - discountPrice;
	        double finalPrice = offerPrice + taxPrice;

	        existintProduct.setName(updatedProduct.getName());
	        existintProduct.setBrand(updatedProduct.getBrand());
	        existintProduct.setMadeIn(updatedProduct.getMadeIn());
	        existintProduct.setPrice(updatedProduct.getPrice());
	        existintProduct.setQuantity(updatedProduct.getQuantity());
	        existintProduct.setDiscountRate(updatedProduct.getDiscountRate());
	        existintProduct.setDiscountPrice(discountPrice);
	        existintProduct.setOfferPrice(offerPrice);
	        existintProduct.setFinalPrice(finalPrice);
	        existintProduct.setStockValue(stockValue);
	        existintProduct.setTaxPrice(taxPrice);

	        productRepository.save(existintProduct);
	    }
		
	}

}